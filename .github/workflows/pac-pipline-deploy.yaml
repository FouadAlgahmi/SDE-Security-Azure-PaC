name: PaC Pipeline Deploy

on:
  workflow_call:
    inputs:

      environment:
        type: string
        required: true 

      pac-selector-dev:
        type: string
        required: true

      run_id:
        type: string
        required: true

      plan_folder:
        type: string
        required: false
        default: ./Output

      definition_folder:
        type: string
        required: false
        default: ./Definitions

jobs:
  review-build-plan-message:
    name: Review build plan
    runs-on: ubuntu-latest
    # container:
    #   image: mcr.microsoft.com/azure-powershell:10.4.1-centos-7
    steps:

      - name: Show plan Output
        uses: actions/github-script@v6
        with:
          script: |
            await core.summary
              .addHeading('Review epac plan results')
              .addLink('Click this link to review the epac plan.', ${{ inputs.run_id }})
              .addBreak()
              .addRaw('On the displayed page scroll to the bottom to treview the build plan.')
              .addBreak()
              .addRaw('Then return to this page to approve or deny the Deployment of the plan.')
              .addBreak()
              .write()
  
  prepare-workspace: 
    name: Prepare workspace for deployment
    runs-on: ubuntu-latest
    # container:
    #   image: mcr.microsoft.com/azure-powershell:10.4.1-centos-7
    needs: review-build-plan-message
    environment: ${{ inputs.envirnoment}}
    steps:

      - name: Checkout
        uses: actions/checkout@v3.3.0

      - name: Download artifact
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ inputs.run_id }}
              }); 
            
            console.log(context.repo.owner, context.repo.repo, ${{ inputs.run_id }}, allArtifacts.data.artifacts);
            let matchArtifact= allArtifacts.data.artifacts.filter((artifact)=> {
            return artifact.name=="Deployment-Plans"})[0];

            let download= await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
              });

            let fs = require('fs')
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/Deployment-Plans.zip`, Buffer.from(download.data));

      - name: Unzip artifacts
        shell: pwsh
        run: |
          mkdir -p ${{ inputs.plan_folder}}
          Expand-Archive -Path Deployment-Plans.zip -DestinationPath ${{ inputs.plan_folder }}
      
      - name: Cache the workspace
        uses: actions/cache/save@v3
        with:
          path: .
          key: ${{ runner.os }}-cache--${{ github.run_id }}

  deploy-to-dev:
    name: Deploy policy plan and roles to dev environment
    runs-on: ubuntu-latest
    # container:
    #   image: mcr.microsoft.com/azure-powershell:10.4.1-centos-7
    needs: prepare-workspace
    steps:
      - name: restore cache
        uses: actions/cache/restore@v3
        with:
          path: .
          key: ${{ runner.OS }}-cache--${{ github.run_id }}
          restore-keys: |
            ${{ runner.OS }}-cache-

      - name: Install Required Modules
        shell: pwsh
        run: |
          Get-PSRepository
          Install-Module -Name Az -Force -AllowClobber -Scope CurrentUser
          Import-Module Az
          Install-Module -Name EnterprisePolicyAsCode -Force -Scope CurrentUser -RequiredVersion 8.2.4 -Repository PSGallery

          Install-Module -Name Pester -Force -Scope CurrentUser -RequiredVersion 5.5.0 -Repository PSGallery

      - name: Deploy the plans
        shell: pwsh
        run: |
          $SecurePassword = ConvertTo-SecureString -String ${{secrets.AZURE_PAC_CLIENT_SECRET}} -AsPlainText -Force
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ${{secrets.AZURE_PAC_CLIENT_ID}}, $SecurePassword
          Connect-AzAccount -ServicePrincipal -TenantId ${{secrets.AZURE_PAC_TENANT_ID}} -Credential $Credential
  
          $outputFile = (join-path ${{ inputs.plan_folder }} "output.txt")
          if (Test-Path $outputFile) {
            Remove-Item -Path $outputFile -Force
          }

          Deploy-PolicyPlan `
            -definitionsRootFolder ${{inputs.definition_folder}} `
            -inputFolder ${{ inputs.plan_folder }} `
            -PacEnvironmentSelector ${{ inputs.pac-selector-dev }} `
            *>&1| Tee-Object -FilePath $outputFile

